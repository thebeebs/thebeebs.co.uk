<!DOCTYPE html>
<html lang="en-US">
<head>
    <meta http-equiv="Content-Type" content="text/html" charset="UTF-8" />
    <meta name="viewport" content="width=device-width,initial-scale=1">
    <title></title>
    <link rel="stylesheet" type="text/css" media="all" href="~/style.css" />
    <link rel="stylesheet" type="text/css" media="all" href="~/css/responsive.css" />
    <link rel="shortcut icon" href="~/images/favicon.ico" />
    <meta name="application-name" content="thebeebs" />
    <meta name="msapplication-TileColor" content="#333333" />
    <meta name="msapplication-TileImage" content="~/images/c2e89bc2-2251-40ea-bf1c-b23d1ae3a3e3.png" />
</head>

<body class="home">
    <nav id="menu-hamburger" class="menu-hamburger">
        <button class="menu-toggle" id="menu-toggle" aria-expanded="false">
            <span class="screen-reader-text">Menu</span>
            <svg class="icon icon-menu-toggle" aria-hidden="true" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" viewBox="0 0 100 100">
                <g class="svg-menu-toggle">
                    <path class="line line-1" d="M5 13h90v14H5z" />
                    <path class="line line-2" d="M5 43h90v14H5z" />
                    <path class="line line-3" d="M5 73h90v14H5z" />
                </g>
            </svg>
        </button>
        <ul class="menu wrap" id="menu-main-nav">            
            @await Component.InvokeAsync("TypeMenu")   
            @await Component.InvokeAsync("CategoryMenu")
        </ul>
</nav>
    <header id="top" role="banner">
        <nav class="menu-top-nav-wrap">
            <ul class="menu wrap" id="menu-top-nav">
               @await Component.InvokeAsync("CategoryMenu")               
              </ul>
        </nav>
        <div class="wrap" id="branding"> 
        <a id="site-title" href="http://www.thebeebs.co.uk">thebeebs</a>
        <div id="site-search"> 
            <img style="float: right;margin-top: -40px;" 
                 src="">
            <form id="searchform" role="search"  ><div>
                <label class="screen-reader-text" for="s">Search for:</label> 
                <input name="s" id="s" type="text" value=""> 
                <input id="searchsubmit" type="submit" value="Search"></div>
            </form></div></div><div class="critterwrap">
        <script>

            document.addEventListener('DOMContentLoaded', init, false);
            var listening;
            function init(){
                document.getElementById("mic").onclick = listen;
                listening = false;
            }

            function startListening() {
                
            }

            function stopListening() {

            }

            function listen() {
                console.log(listening)
                if (listening == true) {
                    listening = false;
                    stopListening();
                    document.getElementById("mic").style.backgroundImage = "url('https://staging.www.projectoxford.ai/Images/bright/utility/mic.png')";
                    
                }
                else {
                    listening = true
                    startListening()
                    document.getElementById("mic").style.backgroundImage = "url('https://staging.www.projectoxford.ai/Images/bright/speech/demo/listening.gif')";
                }
            }


            var ua = navigator.userAgent.toLowerCase();
            var check = function (r) {
                return r.test(ua);
            };
            var isOpera = check(/opera/);
            var isChrome = check(/chrome/);
            var isFF = check(/firefox/);
            var isIE11 = !(window.ActiveXObject) && "ActiveXObject" in window;
            var isIE = !isOpera && (isIE11 || check(/msie/));
            var canWork = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia || navigator.msGetUserMedia;


    
               

                $('.mic.demo_btn').click(function () {
                    micOnClick();
                });

                $('#languageoptions').change(function () {
                    stopRecording();
                    var lang = $('#languageoptions').val();

                    // fr-fr only have one good sample for now
                    if (lang == 'fr-FR') {
                        $('#speech_sample_2').hide();
                    } else {
                        $('#speech_sample_2').show();
                    }
                    $('#hidden').html("<audio preload=\"auto\" autobuffer controls src=\"" + window.applicationRoot + "/Modules/Microsoft.ProjectOxford.Website.Demos/Audios/" + lang.toLowerCase() + "-1.mp3\" class=\"sample1\"></audio><audio preload=\"auto\" autobuffer controls src=\"" + window.applicationRoot + "/Modules/Microsoft.ProjectOxford.Website.Demos/Audios/" + lang.toLowerCase() + "-2.mp3\" class=\"sample2\"></audio>");
                });
            });

            function startDemo() {
                resetSound();
                stopRecording();
                $('#messages').empty();
                textDisplay = "";
            }

            function audioStatusChanged(audio, isPlay) {
                var index = parseInt($(audio).data("index"));
                var btn = $(".samplelink".concat(index));

                if (isPlay) {
                    btn.addClass("playing");
                } else {
                    btn.removeClass("playing");
                }
            };

            function resetSound() {
                stopWebSocket();
                stopSounds();
                $(".samplelink1").removeClass("playing");
                $(".samplelink2").removeClass("playing");
            }


        </script>
                                   <script src="speech.1.0.0.js" type="text/javascript"></script>
                                   <script type="text/javascript">
        var client;
        var request;

        function useMic() {
            return true
        }

        function getMode() {
            switch (document.getElementById("mode").value) {
                case "longDictation":
                    return Microsoft.ProjectOxford.SpeechRecognition.SpeechRecognitionMode.longDictation;
                default:
                    return Microsoft.ProjectOxford.SpeechRecognition.SpeechRecognitionMode.shortPhrase;
            }
        }

        function getOxfordKey() {
            return "a1b8572416fb486c92b307af036d8c1e";
        }

        function getLanguage() {
            return "en-us";
        }

        function clearText() {
            document.getElementById("output").value = "";
        }

        function setText(text) {
            document.getElementById("output").value += text;
        }

        function getLuisConfig() {
            var appid = document.getElementById("luis_appid").value;
            var subid = document.getElementById("luis_subid").value;

            if (appid.length > 0 && subid.length > 0) {
                return { appid: appid, subid: subid };
            }

            return null;
        }

        function start() {
            var mode = getMode();
            var luisCfg = getLuisConfig();

            clearText();

            if (useMic()) {
                if (luisCfg) {
                    client = Microsoft.ProjectOxford.SpeechRecognition.SpeechRecognitionServiceFactory.createMicrophoneClientWithIntent(
                        getLanguage(),
                        getOxfordKey(),
                        getOxfordKey(),
                        luisCfg.appid,
                        luisCfg.subid);
                } else {
                    client = Microsoft.ProjectOxford.SpeechRecognition.SpeechRecognitionServiceFactory.createMicrophoneClient(
                        mode,
                        getLanguage(),
                        getOxfordKey(),
                        getOxfordKey());
                }
                client.startMicAndRecognition();
                setTimeout(function () {
                    client.endMicAndRecognition();
                }, 5000);
            } else {
                if (luisCfg) {
                    client = Microsoft.ProjectOxford.SpeechRecognition.SpeechRecognitionServiceFactory.createDataClientWithIntent(
                        getLanguage(),
                        getOxfordKey(),
                        getOxfordKey(),
                        luisCfg.appid,
                        luisCfg.subid);
                } else {
                    client = Microsoft.ProjectOxford.SpeechRecognition.SpeechRecognitionServiceFactory.createDataClient(
                        mode,
                        getLanguage(),
                        getOxfordKey(),
                        getOxfordKey());
                }
                request = new XMLHttpRequest();
                request.open(
                    'GET',
                    (mode == Microsoft.ProjectOxford.SpeechRecognition.SpeechRecognitionMode.shortPhrase) ? "whatstheweatherlike.wav" : "batman.wav",
                    true);
                request.responseType = 'arraybuffer';
                request.onload = function () {
                    if (request.status !== 200) {
                        setText("unable to receive audio file");
                    } else {
                        client.sendAudio(request.response, request.response.length);
                    }
                };

                request.send();
            }

            client.onPartialResponseReceived = function (response) {
                setText(response);
            }

            client.onFinalResponseReceived = function (response) {
                setText(JSON.stringify(response));
            }

            client.onIntentReceived = function (response) {
                setText(response);
            };
        }
                                   </script>
        <div class="critters"> <button id="mic" onclick="listen()" class="mic demo_btn demo_btn_circle demo_btn_mic" style="background:#87C828 url('https://staging.www.projectoxford.ai/Images/bright/utility/mic.png') no-repeat center center; background-size: 20px; border-radius: 25px;  height:50px; width:50px ; position:absolute; top: -30px; left: -80px; "></button>
        <a id="about-us" href="~/about-me">About Me</a>
        </div>
        </div> 
        <nav class="wrap menu-main-nav-wrap">
            <ul class="menu wrap" id="menu-main-nav">
                @await Component.InvokeAsync("TypeMenu")
            </ul>
        </nav>
    </header>
    <div id="main" role="main">
        <div class="wrap">
            ﻿@RenderBody()
        </div><!--#main.wrap-->
    </div><!--#main-->

    <footer id="footer">
        <div class="wrap">
            <section class="column-3"></section>
            <section class="column-6"></section>
            <section class="column-3 last"></section>
            <div class="clearfix"></div>
        </div>
        <section id="credits">
            <div class="wrap">
                <section id="copyright">
                    &copy; @DateTime.Now.Year.ToString() <a href="~/">Martin Beeby</a>. All rights reserved.
                </section>
                <small id="legal">
                </small>
            </div>
        </section>
    </footer>

    <script>
        // Set button to click.
        var button = document.getElementById('menu-toggle');
        var menu = document.getElementById('menu-hamburger');

        // Click the button.
        button.onclick = function () {

            // Toggle class "opened". Set also aria-expanded to true or false.
            if (-1 !== button.className.indexOf('opened')) {
                button.className = button.className.replace(' opened', '');
                menu.className = menu.className.replace(' opened', '');
                //menu.className = "menu-hamburger";
                button.setAttribute('aria-expanded', 'false');

            } else {
                button.className += ' opened';
                menu.className += ' opened';
                //menu.className = "menu-hamburger-opened";

                button.setAttribute('aria-expanded', 'true');
            }

        };
    </script>
</body>
</html>


